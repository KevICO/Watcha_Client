{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ReEmitter = void 0;\n/*\nCopyright 2015, 2016 OpenMarket Ltd\nCopyright 2017 Vector Creations Ltd\nCopyright 2017 New Vector Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/**\n * @module\n */\n\nclass ReEmitter {\n  constructor(target) {\n    this.target = target; // We keep one bound event handler for each event name so we know\n    // what event is arriving\n\n    this.boundHandlers = {};\n  }\n\n  _handleEvent(eventName, ...args) {\n    this.target.emit(eventName, ...args);\n  }\n\n  reEmit(source, eventNames) {\n    // We include the source as the last argument for event handlers which may need it,\n    // such as read receipt listeners on the client class which won't have the context\n    // of the room.\n    const forSource = (handler, ...args) => {\n      handler(...args, source);\n    };\n\n    for (const eventName of eventNames) {\n      if (this.boundHandlers[eventName] === undefined) {\n        this.boundHandlers[eventName] = this._handleEvent.bind(this, eventName);\n      }\n\n      const boundHandler = forSource.bind(this, this.boundHandlers[eventName]);\n      source.on(eventName, boundHandler);\n    }\n  }\n\n}\n\nexports.ReEmitter = ReEmitter;","map":{"version":3,"sources":["/home/kimist/Developpement/React/watcha_client/node_modules/matrix-js-sdk/lib/ReEmitter.js"],"names":["Object","defineProperty","exports","value","ReEmitter","constructor","target","boundHandlers","_handleEvent","eventName","args","emit","reEmit","source","eventNames","forSource","handler","undefined","bind","boundHandler","on"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,SAAR,GAAoB,KAAK,CAAzB;AAEA;;;;;;;;;;;;;;;;;;AAkBA;;;;AAGA,MAAMA,SAAN,CAAgB;AACdC,EAAAA,WAAW,CAACC,MAAD,EAAS;AAClB,SAAKA,MAAL,GAAcA,MAAd,CADkB,CACI;AACtB;;AAEA,SAAKC,aAAL,GAAqB,EAArB;AACD;;AAEDC,EAAAA,YAAY,CAACC,SAAD,EAAY,GAAGC,IAAf,EAAqB;AAC/B,SAAKJ,MAAL,CAAYK,IAAZ,CAAiBF,SAAjB,EAA4B,GAAGC,IAA/B;AACD;;AAEDE,EAAAA,MAAM,CAACC,MAAD,EAASC,UAAT,EAAqB;AACzB;AACA;AACA;AACA,UAAMC,SAAS,GAAG,CAACC,OAAD,EAAU,GAAGN,IAAb,KAAsB;AACtCM,MAAAA,OAAO,CAAC,GAAGN,IAAJ,EAAUG,MAAV,CAAP;AACD,KAFD;;AAIA,SAAK,MAAMJ,SAAX,IAAwBK,UAAxB,EAAoC;AAClC,UAAI,KAAKP,aAAL,CAAmBE,SAAnB,MAAkCQ,SAAtC,EAAiD;AAC/C,aAAKV,aAAL,CAAmBE,SAAnB,IAAgC,KAAKD,YAAL,CAAkBU,IAAlB,CAAuB,IAAvB,EAA6BT,SAA7B,CAAhC;AACD;;AAED,YAAMU,YAAY,GAAGJ,SAAS,CAACG,IAAV,CAAe,IAAf,EAAqB,KAAKX,aAAL,CAAmBE,SAAnB,CAArB,CAArB;AACAI,MAAAA,MAAM,CAACO,EAAP,CAAUX,SAAV,EAAqBU,YAArB;AACD;AACF;;AA5Ba;;AAgChBjB,OAAO,CAACE,SAAR,GAAoBA,SAApB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ReEmitter = void 0;\n\n/*\nCopyright 2015, 2016 OpenMarket Ltd\nCopyright 2017 Vector Creations Ltd\nCopyright 2017 New Vector Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/**\n * @module\n */\nclass ReEmitter {\n  constructor(target) {\n    this.target = target; // We keep one bound event handler for each event name so we know\n    // what event is arriving\n\n    this.boundHandlers = {};\n  }\n\n  _handleEvent(eventName, ...args) {\n    this.target.emit(eventName, ...args);\n  }\n\n  reEmit(source, eventNames) {\n    // We include the source as the last argument for event handlers which may need it,\n    // such as read receipt listeners on the client class which won't have the context\n    // of the room.\n    const forSource = (handler, ...args) => {\n      handler(...args, source);\n    };\n\n    for (const eventName of eventNames) {\n      if (this.boundHandlers[eventName] === undefined) {\n        this.boundHandlers[eventName] = this._handleEvent.bind(this, eventName);\n      }\n\n      const boundHandler = forSource.bind(this, this.boundHandlers[eventName]);\n      source.on(eventName, boundHandler);\n    }\n  }\n\n}\n\nexports.ReEmitter = ReEmitter;"]},"metadata":{},"sourceType":"script"}