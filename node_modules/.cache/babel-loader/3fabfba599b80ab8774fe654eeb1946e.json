{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.keyFromAuthData = keyFromAuthData;\nexports.keyFromPassphrase = keyFromPassphrase;\nexports.deriveKey = deriveKey;\n\nvar _randomstring = require(\"../randomstring\");\n/*\nCopyright 2018 New Vector Ltd\nCopyright 2019 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n\nconst DEFAULT_ITERATIONS = 500000;\n\nasync function keyFromAuthData(authData, password) {\n  if (!global.Olm) {\n    throw new Error(\"Olm is not available\");\n  }\n\n  if (!authData.private_key_salt || !authData.private_key_iterations) {\n    throw new Error(\"Salt and/or iterations not found: \" + \"this backup cannot be restored with a passphrase\");\n  }\n\n  return await deriveKey(password, authData.private_key_salt, authData.private_key_iterations);\n}\n\nasync function keyFromPassphrase(password) {\n  if (!global.Olm) {\n    throw new Error(\"Olm is not available\");\n  }\n\n  const salt = (0, _randomstring.randomString)(32);\n  const key = await deriveKey(password, salt, DEFAULT_ITERATIONS);\n  return {\n    key,\n    salt,\n    iterations: DEFAULT_ITERATIONS\n  };\n}\n\nasync function deriveKey(password, salt, iterations) {\n  const subtleCrypto = global.crypto.subtle;\n  const TextEncoder = global.TextEncoder;\n\n  if (!subtleCrypto || !TextEncoder) {\n    // TODO: Implement this for node\n    throw new Error(\"Password-based backup is not avaiable on this platform\");\n  }\n\n  const key = await subtleCrypto.importKey('raw', new TextEncoder().encode(password), {\n    name: 'PBKDF2'\n  }, false, ['deriveBits']);\n  const keybits = await subtleCrypto.deriveBits({\n    name: 'PBKDF2',\n    salt: new TextEncoder().encode(salt),\n    iterations: iterations,\n    hash: 'SHA-512'\n  }, key, global.Olm.PRIVATE_KEY_LENGTH * 8);\n  return new Uint8Array(keybits);\n}","map":{"version":3,"sources":["/home/kimist/Developpement/React/watcha_client/node_modules/matrix-js-sdk/lib/crypto/key_passphrase.js"],"names":["Object","defineProperty","exports","value","keyFromAuthData","keyFromPassphrase","deriveKey","_randomstring","require","DEFAULT_ITERATIONS","authData","password","global","Olm","Error","private_key_salt","private_key_iterations","salt","randomString","key","iterations","subtleCrypto","crypto","subtle","TextEncoder","importKey","encode","name","keybits","deriveBits","hash","PRIVATE_KEY_LENGTH","Uint8Array"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,eAAR,GAA0BA,eAA1B;AACAF,OAAO,CAACG,iBAAR,GAA4BA,iBAA5B;AACAH,OAAO,CAACI,SAAR,GAAoBA,SAApB;;AAEA,IAAIC,aAAa,GAAGC,OAAO,CAAC,iBAAD,CAA3B;AAEA;;;;;;;;;;;;;;;;;;AAgBA,MAAMC,kBAAkB,GAAG,MAA3B;;AAEA,eAAeL,eAAf,CAA+BM,QAA/B,EAAyCC,QAAzC,EAAmD;AACjD,MAAI,CAACC,MAAM,CAACC,GAAZ,EAAiB;AACf,UAAM,IAAIC,KAAJ,CAAU,sBAAV,CAAN;AACD;;AAED,MAAI,CAACJ,QAAQ,CAACK,gBAAV,IAA8B,CAACL,QAAQ,CAACM,sBAA5C,EAAoE;AAClE,UAAM,IAAIF,KAAJ,CAAU,uCAAuC,kDAAjD,CAAN;AACD;;AAED,SAAO,MAAMR,SAAS,CAACK,QAAD,EAAWD,QAAQ,CAACK,gBAApB,EAAsCL,QAAQ,CAACM,sBAA/C,CAAtB;AACD;;AAED,eAAeX,iBAAf,CAAiCM,QAAjC,EAA2C;AACzC,MAAI,CAACC,MAAM,CAACC,GAAZ,EAAiB;AACf,UAAM,IAAIC,KAAJ,CAAU,sBAAV,CAAN;AACD;;AAED,QAAMG,IAAI,GAAG,CAAC,GAAGV,aAAa,CAACW,YAAlB,EAAgC,EAAhC,CAAb;AACA,QAAMC,GAAG,GAAG,MAAMb,SAAS,CAACK,QAAD,EAAWM,IAAX,EAAiBR,kBAAjB,CAA3B;AACA,SAAO;AACLU,IAAAA,GADK;AAELF,IAAAA,IAFK;AAGLG,IAAAA,UAAU,EAAEX;AAHP,GAAP;AAKD;;AAED,eAAeH,SAAf,CAAyBK,QAAzB,EAAmCM,IAAnC,EAAyCG,UAAzC,EAAqD;AACnD,QAAMC,YAAY,GAAGT,MAAM,CAACU,MAAP,CAAcC,MAAnC;AACA,QAAMC,WAAW,GAAGZ,MAAM,CAACY,WAA3B;;AAEA,MAAI,CAACH,YAAD,IAAiB,CAACG,WAAtB,EAAmC;AACjC;AACA,UAAM,IAAIV,KAAJ,CAAU,wDAAV,CAAN;AACD;;AAED,QAAMK,GAAG,GAAG,MAAME,YAAY,CAACI,SAAb,CAAuB,KAAvB,EAA8B,IAAID,WAAJ,GAAkBE,MAAlB,CAAyBf,QAAzB,CAA9B,EAAkE;AAClFgB,IAAAA,IAAI,EAAE;AAD4E,GAAlE,EAEf,KAFe,EAER,CAAC,YAAD,CAFQ,CAAlB;AAGA,QAAMC,OAAO,GAAG,MAAMP,YAAY,CAACQ,UAAb,CAAwB;AAC5CF,IAAAA,IAAI,EAAE,QADsC;AAE5CV,IAAAA,IAAI,EAAE,IAAIO,WAAJ,GAAkBE,MAAlB,CAAyBT,IAAzB,CAFsC;AAG5CG,IAAAA,UAAU,EAAEA,UAHgC;AAI5CU,IAAAA,IAAI,EAAE;AAJsC,GAAxB,EAKnBX,GALmB,EAKdP,MAAM,CAACC,GAAP,CAAWkB,kBAAX,GAAgC,CALlB,CAAtB;AAMA,SAAO,IAAIC,UAAJ,CAAeJ,OAAf,CAAP;AACD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.keyFromAuthData = keyFromAuthData;\nexports.keyFromPassphrase = keyFromPassphrase;\nexports.deriveKey = deriveKey;\n\nvar _randomstring = require(\"../randomstring\");\n\n/*\nCopyright 2018 New Vector Ltd\nCopyright 2019 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nconst DEFAULT_ITERATIONS = 500000;\n\nasync function keyFromAuthData(authData, password) {\n  if (!global.Olm) {\n    throw new Error(\"Olm is not available\");\n  }\n\n  if (!authData.private_key_salt || !authData.private_key_iterations) {\n    throw new Error(\"Salt and/or iterations not found: \" + \"this backup cannot be restored with a passphrase\");\n  }\n\n  return await deriveKey(password, authData.private_key_salt, authData.private_key_iterations);\n}\n\nasync function keyFromPassphrase(password) {\n  if (!global.Olm) {\n    throw new Error(\"Olm is not available\");\n  }\n\n  const salt = (0, _randomstring.randomString)(32);\n  const key = await deriveKey(password, salt, DEFAULT_ITERATIONS);\n  return {\n    key,\n    salt,\n    iterations: DEFAULT_ITERATIONS\n  };\n}\n\nasync function deriveKey(password, salt, iterations) {\n  const subtleCrypto = global.crypto.subtle;\n  const TextEncoder = global.TextEncoder;\n\n  if (!subtleCrypto || !TextEncoder) {\n    // TODO: Implement this for node\n    throw new Error(\"Password-based backup is not avaiable on this platform\");\n  }\n\n  const key = await subtleCrypto.importKey('raw', new TextEncoder().encode(password), {\n    name: 'PBKDF2'\n  }, false, ['deriveBits']);\n  const keybits = await subtleCrypto.deriveBits({\n    name: 'PBKDF2',\n    salt: new TextEncoder().encode(salt),\n    iterations: iterations,\n    hash: 'SHA-512'\n  }, key, global.Olm.PRIVATE_KEY_LENGTH * 8);\n  return new Uint8Array(keybits);\n}"]},"metadata":{},"sourceType":"script"}