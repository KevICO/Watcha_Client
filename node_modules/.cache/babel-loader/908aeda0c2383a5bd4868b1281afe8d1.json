{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EventContext = EventContext;\n/*\nCopyright 2015, 2016 OpenMarket Ltd\nCopyright 2019 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/**\n * @module models/event-context\n */\n\n/**\n * Construct a new EventContext\n *\n * An eventcontext is used for circumstances such as search results, when we\n * have a particular event of interest, and a bunch of events before and after\n * it.\n *\n * It also stores pagination tokens for going backwards and forwards in the\n * timeline.\n *\n * @param {MatrixEvent} ourEvent  the event at the centre of this context\n *\n * @constructor\n */\n\nfunction EventContext(ourEvent) {\n  this._timeline = [ourEvent];\n  this._ourEventIndex = 0;\n  this._paginateTokens = {\n    b: null,\n    f: null\n  }; // this is used by MatrixClient to keep track of active requests\n\n  this._paginateRequests = {\n    b: null,\n    f: null\n  };\n}\n/**\n * Get the main event of interest\n *\n * This is a convenience function for getTimeline()[getOurEventIndex()].\n *\n * @return {MatrixEvent} The event at the centre of this context.\n */\n\n\nEventContext.prototype.getEvent = function () {\n  return this._timeline[this._ourEventIndex];\n};\n/**\n * Get the list of events in this context\n *\n * @return {Array} An array of MatrixEvents\n */\n\n\nEventContext.prototype.getTimeline = function () {\n  return this._timeline;\n};\n/**\n * Get the index in the timeline of our event\n *\n * @return {Number}\n */\n\n\nEventContext.prototype.getOurEventIndex = function () {\n  return this._ourEventIndex;\n};\n/**\n * Get a pagination token.\n *\n * @param {boolean} backwards   true to get the pagination token for going\n *                                  backwards in time\n * @return {string}\n */\n\n\nEventContext.prototype.getPaginateToken = function (backwards) {\n  return this._paginateTokens[backwards ? 'b' : 'f'];\n};\n/**\n * Set a pagination token.\n *\n * Generally this will be used only by the matrix js sdk.\n *\n * @param {string} token        pagination token\n * @param {boolean} backwards   true to set the pagination token for going\n *                                   backwards in time\n */\n\n\nEventContext.prototype.setPaginateToken = function (token, backwards) {\n  this._paginateTokens[backwards ? 'b' : 'f'] = token;\n};\n/**\n * Add more events to the timeline\n *\n * @param {Array} events      new events, in timeline order\n * @param {boolean} atStart   true to insert new events at the start\n */\n\n\nEventContext.prototype.addEvents = function (events, atStart) {\n  // TODO: should we share logic with Room.addEventsToTimeline?\n  // Should Room even use EventContext?\n  if (atStart) {\n    this._timeline = events.concat(this._timeline);\n    this._ourEventIndex += events.length;\n  } else {\n    this._timeline = this._timeline.concat(events);\n  }\n};","map":{"version":3,"sources":["/home/kimist/Developpement/React/watcha_client/node_modules/matrix-js-sdk/lib/models/event-context.js"],"names":["Object","defineProperty","exports","value","EventContext","ourEvent","_timeline","_ourEventIndex","_paginateTokens","b","f","_paginateRequests","prototype","getEvent","getTimeline","getOurEventIndex","getPaginateToken","backwards","setPaginateToken","token","addEvents","events","atStart","concat","length"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,YAAR,GAAuBA,YAAvB;AAEA;;;;;;;;;;;;;;;;;AAiBA;;;;AAIA;;;;;;;;;;;;;;;AAcA,SAASA,YAAT,CAAsBC,QAAtB,EAAgC;AAC9B,OAAKC,SAAL,GAAiB,CAACD,QAAD,CAAjB;AACA,OAAKE,cAAL,GAAsB,CAAtB;AACA,OAAKC,eAAL,GAAuB;AACrBC,IAAAA,CAAC,EAAE,IADkB;AAErBC,IAAAA,CAAC,EAAE;AAFkB,GAAvB,CAH8B,CAM3B;;AAEH,OAAKC,iBAAL,GAAyB;AACvBF,IAAAA,CAAC,EAAE,IADoB;AAEvBC,IAAAA,CAAC,EAAE;AAFoB,GAAzB;AAID;AACD;;;;;;;;;AASAN,YAAY,CAACQ,SAAb,CAAuBC,QAAvB,GAAkC,YAAY;AAC5C,SAAO,KAAKP,SAAL,CAAe,KAAKC,cAApB,CAAP;AACD,CAFD;AAGA;;;;;;;AAOAH,YAAY,CAACQ,SAAb,CAAuBE,WAAvB,GAAqC,YAAY;AAC/C,SAAO,KAAKR,SAAZ;AACD,CAFD;AAGA;;;;;;;AAOAF,YAAY,CAACQ,SAAb,CAAuBG,gBAAvB,GAA0C,YAAY;AACpD,SAAO,KAAKR,cAAZ;AACD,CAFD;AAGA;;;;;;;;;AASAH,YAAY,CAACQ,SAAb,CAAuBI,gBAAvB,GAA0C,UAAUC,SAAV,EAAqB;AAC7D,SAAO,KAAKT,eAAL,CAAqBS,SAAS,GAAG,GAAH,GAAS,GAAvC,CAAP;AACD,CAFD;AAGA;;;;;;;;;;;AAWAb,YAAY,CAACQ,SAAb,CAAuBM,gBAAvB,GAA0C,UAAUC,KAAV,EAAiBF,SAAjB,EAA4B;AACpE,OAAKT,eAAL,CAAqBS,SAAS,GAAG,GAAH,GAAS,GAAvC,IAA8CE,KAA9C;AACD,CAFD;AAGA;;;;;;;;AAQAf,YAAY,CAACQ,SAAb,CAAuBQ,SAAvB,GAAmC,UAAUC,MAAV,EAAkBC,OAAlB,EAA2B;AAC5D;AACA;AACA,MAAIA,OAAJ,EAAa;AACX,SAAKhB,SAAL,GAAiBe,MAAM,CAACE,MAAP,CAAc,KAAKjB,SAAnB,CAAjB;AACA,SAAKC,cAAL,IAAuBc,MAAM,CAACG,MAA9B;AACD,GAHD,MAGO;AACL,SAAKlB,SAAL,GAAiB,KAAKA,SAAL,CAAeiB,MAAf,CAAsBF,MAAtB,CAAjB;AACD;AACF,CATD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EventContext = EventContext;\n\n/*\nCopyright 2015, 2016 OpenMarket Ltd\nCopyright 2019 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/**\n * @module models/event-context\n */\n\n/**\n * Construct a new EventContext\n *\n * An eventcontext is used for circumstances such as search results, when we\n * have a particular event of interest, and a bunch of events before and after\n * it.\n *\n * It also stores pagination tokens for going backwards and forwards in the\n * timeline.\n *\n * @param {MatrixEvent} ourEvent  the event at the centre of this context\n *\n * @constructor\n */\nfunction EventContext(ourEvent) {\n  this._timeline = [ourEvent];\n  this._ourEventIndex = 0;\n  this._paginateTokens = {\n    b: null,\n    f: null\n  }; // this is used by MatrixClient to keep track of active requests\n\n  this._paginateRequests = {\n    b: null,\n    f: null\n  };\n}\n/**\n * Get the main event of interest\n *\n * This is a convenience function for getTimeline()[getOurEventIndex()].\n *\n * @return {MatrixEvent} The event at the centre of this context.\n */\n\n\nEventContext.prototype.getEvent = function () {\n  return this._timeline[this._ourEventIndex];\n};\n/**\n * Get the list of events in this context\n *\n * @return {Array} An array of MatrixEvents\n */\n\n\nEventContext.prototype.getTimeline = function () {\n  return this._timeline;\n};\n/**\n * Get the index in the timeline of our event\n *\n * @return {Number}\n */\n\n\nEventContext.prototype.getOurEventIndex = function () {\n  return this._ourEventIndex;\n};\n/**\n * Get a pagination token.\n *\n * @param {boolean} backwards   true to get the pagination token for going\n *                                  backwards in time\n * @return {string}\n */\n\n\nEventContext.prototype.getPaginateToken = function (backwards) {\n  return this._paginateTokens[backwards ? 'b' : 'f'];\n};\n/**\n * Set a pagination token.\n *\n * Generally this will be used only by the matrix js sdk.\n *\n * @param {string} token        pagination token\n * @param {boolean} backwards   true to set the pagination token for going\n *                                   backwards in time\n */\n\n\nEventContext.prototype.setPaginateToken = function (token, backwards) {\n  this._paginateTokens[backwards ? 'b' : 'f'] = token;\n};\n/**\n * Add more events to the timeline\n *\n * @param {Array} events      new events, in timeline order\n * @param {boolean} atStart   true to insert new events at the start\n */\n\n\nEventContext.prototype.addEvents = function (events, atStart) {\n  // TODO: should we share logic with Room.addEventsToTimeline?\n  // Should Room even use EventContext?\n  if (atStart) {\n    this._timeline = events.concat(this._timeline);\n    this._ourEventIndex += events.length;\n  } else {\n    this._timeline = this._timeline.concat(events);\n  }\n};"]},"metadata":{},"sourceType":"script"}